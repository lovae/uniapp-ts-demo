import axios from 'axios';
import VueAxios from 'vue-axios';

interface IAxiosRequestConfig {

  // `url` is the server URL that will be used for the request
  url: String,

  // `method` is the request method to be used when making the request
  // default'get'
  method?: String,

  // `baseURL` will be prepended to `url` unless `url` is absolute.
  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs
  // to methods of that instance.
  // example : 'https://some-domain.com/api/'
  baseURL?: String,

  // `transformRequest` allows changes to the request data before it is sent to the server
  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'
  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,
  // FormData or Stream
  // You may modify the headers object.
  // [function (data, headers) {// Do whatever you want to transform the data
  //    return data;
  //  }]
  transformRequest?: ((data: any, headers: any) => any)[],

  // `transformResponse` allows changes to the response data to be made before
  // it is passed to then/catch
  //[function (data) {
  //  // Do whatever you want to transform the data
  //  return data;
  //}]
  transformResponse?: ((data: any) => any)[],

  // `headers` are custom headers to be sent
  //  { 'X-Requested-With': 'XMLHttpRequest' }
  headers?: Object,

  // params` are the URL parameters to be sent with the request
  // Must be a plain object or a URLSearchParams object
  // examples : {  ID: 12345 }
  params?: Object,

  // `paramsSerializer` is an optional function in charge of serializing `params`
  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)
  // function (params) {
  //  return Qs.stringify(params, { arrayFormat: 'brackets' })
  // }
  paramsSerializer: (params: Object) => String,

  // data` is the data to be sent as the request body
  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'
  // When no `transformRequest` is set, must be of one of the following types:
  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams
  // - Browser only: FormData, File, Blob
  // - Node only: Stream, Buffer

  // syntax alternative to send data into the body
  // method post
  // only the value is sent, not the key
  data?: any,

  // `timeout` specifies the number of milliseconds before the request times out.
  // If the request takes longer than `timeout`, the request will be aborted.
  // default is `0` (no timeout)
  timeout?: Number,

  // `withCredentials` indicates whether or not cross-site Access-Control requests
  // should be made using credentials
  // default false
  withCredentials?: Boolean,

  // `adapter` allows custom handling of requests which makes testing easier.
  // Return a promise and supply a valid response (see lib/adapters/README.md).
  // function (config) {
  //  return new Promise(function(resolve, reject) {
  //  }
  // }
  adapter?: (config: Object) => void,

  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.
  // This will set an `Authorization` header, overwriting any existing
  // `Authorization` custom headers you have set using `headers`.
  // Please note that only HTTP Basic auth is configurable through this parameter.
  // For Bearer tokens and such, use `Authorization` custom headers instead.
  // Example :{
  //  username: 'janedoe',
  //  password: 's00pers3cret'
  // }
  auth?: Object,

  // `responseType` indicates the type of data that the server will respond with
  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'
  // browser only: 'blob'
  // default:'json'
  responseType?: String,

  // `responseEncoding` indicates encoding to use for decoding responses
  // Note: Ignored for `responseType` of 'stream' or client-side requests
  // default:'utf8'
  responseEncoding?: String,

  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token
  // default:'XSRF-TOKEN'
  xsrfCookieName: String,

  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value
  // default:'X-XSRF-TOKEN'
  xsrfHeaderName: String,

  // `onUploadProgress` allows handling of progress events for uploads
  // function (progressEvent) {
  //  Do whatever you want with the native progress event
  // }
  onUploadProgress?: (progressEvent: any)=> void,

  // `onDownloadProgress` allows handling of progress events for downloads
  //  function(progressEvent) {
  //    Do whatever you want with the native progress event
  //  }
  onDownloadProgress: (progressEvent: any) => void,

  // `maxContentLength` defines the max size of the http response content in bytes allowed
  // 
  maxContentLength?: Number,

  // `validateStatus` defines whether to resolve or reject the promise for a given
  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`
  // or `undefined`), the promise will be resolved; otherwise, the promise will be
  // rejected.
  //function(status) {
  //  return status >= 200 && status < 300; // default
  //}
  validateStatus: (status: number) => Boolean,

  // `maxRedirects` defines the maximum number of redirects to follow in node.js.
  // If set to 0, no redirects will be followed.
  // default:5
  maxRedirects: Number,  

  // `socketPath` defines a UNIX Socket to be used in node.js.
  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.
  // Only either `socketPath` or `proxy` can be specified.
  // If both are specified, `socketPath` is used.
  // default:null
  socketPath?: String | null,  

  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http
  // and https requests, respectively, in node.js. This allows options to be added like
  // `keepAlive` that are not enabled by default.
  // httpAgent: new http.Agent({ keepAlive: true }),
  // httpsAgent: new https.Agent({ keepAlive: true }),

  // 'proxy' defines the hostname and port of the proxy server.
  // You can also define your proxy using the conventional `http_proxy` and
  // `https_proxy` environment variables. If you are using environment variables
  // for your proxy configuration, you can also define a `no_proxy` environment
  // variable as a comma-separated list of domains that should not be proxied.
  // Use `false` to disable proxies, ignoring environment variables.
  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and
  // supplies credentials.
  // This will set an `Proxy-Authorization` header, overwriting any existing
  // `Proxy-Authorization` custom headers you have set using `headers`.
  //proxy: {
  //  host: '127.0.0.1',
  //    port: 9000,
  //      auth: {
  //    username: 'mikeymike',
  //      password: 'rapunz3l'
  //  }
  //},

// `cancelToken` specifies a cancel token that can be used to cancel the request
  // (see Cancellation section below for details)
  cancelToken: Vue.axios.CancelToken

}
